diff -ruN libgdiam-1.0.3/CMakeLists.txt libgdiam-1.0.3-revised/CMakeLists.txt
--- libgdiam-1.0.3/CMakeLists.txt	2016-08-18 20:13:07.000000000 +0800
+++ libgdiam-1.0.3-revised/CMakeLists.txt	2021-03-16 20:05:54.458416511 +0800
@@ -12,46 +12,4 @@
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR})
 
-if(NOT DEFINED BIN_DIR)
-  set(BIN_DIR bin)
-endif(NOT DEFINED BIN_DIR)
-
-if(NOT DEFINED LIB_DIR)
-  set(LIB_DIR lib)
-endif(NOT DEFINED LIB_DIR)
-
-add_library(libgdiam SHARED gdiam.cpp)
-set_target_properties(libgdiam PROPERTIES PREFIX "")
-install(TARGETS libgdiam
-  RUNTIME DESTINATION ${BIN_DIR}
-  LIBRARY DESTINATION ${LIB_DIR}
-  ARCHIVE DESTINATION ${LIB_DIR})
-
-if(MSVC)
-   set_property(TARGET libgdiam APPEND PROPERTY COMPILE_DEFINITIONS "GDIAM_DLL_EXPORTS")
-endif(MSVC)
-
-if(BUILD_STATIC_LIBS)
-  add_library(libgdiam-static STATIC gdiam.cpp)
-  if(CMAKE_CL_64)
-    set_target_properties(libgdiam-static PROPERTIES STATIC_LIBRARY_FLAGS "/machine:x64")
-  endif(CMAKE_CL_64)
-endif(BUILD_STATIC_LIBS)
-
-
-if(ENABLE_GDIAM_TESTING)
-  # Enable ctest
-  ENABLE_TESTING()
-
-  add_executable(gdiam_test gdiam_test.cpp)
-  target_link_libraries(gdiam_test libgdiam)
-
-  add_test(unit_cube_test gdiam_test)
-endif(ENABLE_GDIAM_TESTING)
-
-# Local Variables:
-# tab-width: 8
-# mode: cmake
-# indent-tabs-mode: t
-# End:
-# ex: shiftwidth=2 tabstop=8
+add_executable(gdiam_test gdiam.cpp gdiam_test.cpp)
\ No newline at end of file
diff -ruN libgdiam-1.0.3/gdiam_test.cpp libgdiam-1.0.3-revised/gdiam_test.cpp
--- libgdiam-1.0.3/gdiam_test.cpp	2016-08-18 20:13:07.000000000 +0800
+++ libgdiam-1.0.3-revised/gdiam_test.cpp	2021-03-16 20:05:54.458416511 +0800
@@ -28,124 +28,122 @@
  *                    [x_n y_n z_n]
 \*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
 
-#include  <stdlib.h>
-#include  <stdio.h>
-#include  <assert.h>
-#include  <memory.h>
-#include  <math.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <assert.h>
+#include <memory.h>
+#include <math.h>
 
-#include  "gdiam.hpp"
+#include "gdiam.hpp"
 
 /*--- Start of Code ---*/
 
-
-void   test_itself( gdiam_real  * points, int  num )
+void test_itself(gdiam_real *points, int num)
 {
-    GPointPair   pair;
+    GPointPair pair;
 
-    printf( "Computing the diameter for %d points selected "
-            "uniformly from the unit cube\n", num );
-    pair = gdiam_approx_diam_pair( (gdiam_real *)points, num, 0.0 );
-    printf( "Diameter distance: %g\n", pair.distance );
-    printf( "Points realizing the diameter\n"
-            "\t(%g, %g, %g) - (%g, %g, %g)\n",
-            pair.p[ 0 ], pair.p[ 1 ], pair.p[ 2 ],
-            pair.q[ 0 ], pair.q[ 1 ], pair.q[ 2 ] );
-
-
-    gdiam_point  * pnt_arr;
-    gdiam_bbox   bb;
-
-    pnt_arr = gdiam_convert( (gdiam_real *)points, num );
-
-    printf( "Computing a tight-fitting bounding box of the point-set\n" );
-    bb = gdiam_approx_mvbb_grid_sample( pnt_arr, num, 5, 400 );
-
-    printf( "Resulting bounding box:\n" );
-    bb.dump();
-
-    printf( "Axis parallel bounding box\n" );
-    GBBox   bbx;
-    bbx.init();
-    for  ( int  ind = 0; ind < num; ind++ )
-        bbx.bound( points + (ind * 3) );
-    bbx.dump();
-        
+    printf("Computing the diameter for %d points selected "
+           "uniformly from the unit cube\n",
+           num);
+    pair = gdiam_approx_diam_pair((gdiam_real *)points, num, 0.0);
+    printf("Diameter distance: %g\n", pair.distance);
+    printf("Points realizing the diameter\n"
+           "\t(%g, %g, %g) - (%g, %g, %g)\n",
+           pair.p[0], pair.p[1], pair.p[2],
+           pair.q[0], pair.q[1], pair.q[2]);
+
+    // gdiam_point  * pnt_arr;
+    // gdiam_bbox   bb;
+
+    // pnt_arr = gdiam_convert( (gdiam_real *)points, num );
+
+    // printf( "Computing a tight-fitting bounding box of the point-set\n" );
+    // bb = gdiam_approx_mvbb_grid_sample( pnt_arr, num, 5, 400 );
+
+    // printf( "Resulting bounding box:\n" );
+    // bb.dump();
+
+    // printf( "Axis parallel bounding box\n" );
+    // GBBox   bbx;
+    // bbx.init();
+    // for  ( int  ind = 0; ind < num; ind++ )
+    //     bbx.bound( points + (ind * 3) );
+    // bbx.dump();
 }
 
-
-void   standard_test()
+void standard_test()
 {
-    gdiam_real  * points;
-    int  num;
+    gdiam_real *points;
+    int num;
 
     num = 1000000;
 
-    points = (gdiam_point)malloc( sizeof( gdiam_point_t ) * num );
-    assert( points != NULL );
+    points = (gdiam_point)malloc(sizeof(gdiam_point_t) * num);
+    assert(points != NULL);
 
     // Pick randomly points from the unit cube */
-    for  ( int  ind = 0; ind < num; ind++ ) {
-        points[ ind * 3 + 0 ] = drand48();
-        points[ ind * 3 + 1 ] = drand48();
-        points[ ind * 3 + 2 ] = drand48();
+    for (int ind = 0; ind < num; ind++)
+    {
+        points[ind * 3 + 0] = drand48();
+        points[ind * 3 + 1] = drand48();
+        points[ind * 3 + 2] = drand48();
     }
 
-    test_itself( points, num );
+    test_itself(points, num);
 }
 
-
-void  read_points( FILE   * fl, gdiam_real  * points, int  points_num )
+void read_points(FILE *fl, gdiam_real *points, int points_num)
 {
-    int  args;
-    double  x, y, z;
+    int args;
+    double x, y, z;
 
-    for  ( int  ind = 0; ind < points_num; ind++ ) {
-        args = fscanf( fl, "%lg %lg %lg\n", &x, &y, &z );
-        assert( args == 3 );
-
-        points[ ind * 3 + 0 ] = x;
-        points[ ind * 3 + 1 ] = y;
-        points[ ind * 3 + 2 ] = z;
+    for (int ind = 0; ind < points_num; ind++)
+    {
+        args = fscanf(fl, "%lg %lg %lg\n", &x, &y, &z);
+        assert(args == 3);
+
+        points[ind * 3 + 0] = x;
+        points[ind * 3 + 1] = y;
+        points[ind * 3 + 2] = z;
     }
 }
 
-
-void  test_file( const char  * file_name )
+void test_file(const char *file_name)
 {
-    gdiam_real  * points;
-    FILE   * fl;
-    int  args, points_num;
-
-    fl = fopen( file_name, "rt" );
-    if  ( fl == NULL ) {
-        printf( "Unable to open file: [%s]\n", file_name );
-        exit( -1 );
+    gdiam_real *points;
+    FILE *fl;
+    int args, points_num;
+
+    fl = fopen(file_name, "rt");
+    if (fl == NULL)
+    {
+        printf("Unable to open file: [%s]\n", file_name);
+        exit(-1);
     }
-    args = fscanf( fl, "%d\n", &points_num );
-    assert( ( args > 0 )  &&  ( points_num > 0 ) );
+    args = fscanf(fl, "%d\n", &points_num);
+    assert((args > 0) && (points_num > 0));
 
-    points = (gdiam_point)malloc( sizeof( gdiam_point_t ) * points_num );
-    assert( points != NULL );
+    points = (gdiam_point)malloc(sizeof(gdiam_point_t) * points_num);
+    assert(points != NULL);
 
-    read_points( fl, points, points_num );
-    fclose( fl );
+    read_points(fl, points, points_num);
+    fclose(fl);
 
-    test_itself( points, points_num );
+    test_itself(points, points_num);
 }
 
-
-int  main( int  argc, char  ** argv )
+int main(int argc, char **argv)
 {
-    if  ( argc == 1 ) {
+    if (argc == 1)
+    {
         standard_test();
-        return  0;
+        return 0;
     }
 
-    for  ( int  ind = 1; ind < argc; ind++ )
-        test_file( argv[ ind ] );
+    for (int ind = 1; ind < argc; ind++)
+        test_file(argv[ind]);
 
-    return  0;
+    return 0;
 }
 
 /* gdiam_test.C - End of File ------------------------------------------*/
diff -ruN libgdiam-1.0.3/Makefile libgdiam-1.0.3-revised/Makefile
--- libgdiam-1.0.3/Makefile	2018-03-07 04:04:00.000000000 +0800
+++ libgdiam-1.0.3-revised/Makefile	1970-01-01 08:00:00.000000000 +0800
@@ -1,2 +0,0 @@
-gdiam_test: gdiam.cpp gdiam_test.cpp
-	g++ -Wall  -o gdiam_test gdiam.cpp gdiam_test.cpp 
